
akka {
	loggers = ["akka.event.slf4j.Slf4jLogger"]
	logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
	log-dead-letters = 0
	akka.log-dead-letters-during-shutdown = 0

	http{
		server{
			idle-timeout = 300 s
			parsing {
				max-uri-length = 8k
				max-content-length = 50m
				max-to-strict-bytes = 50m
				illegal-header-warnings = off
			}
		}

		caching.lfu-cache {
			time-to-live = 60 minutes
			time-to-idle = 60 minutes
		}
	}
}

cpmeta{
	port: 9094
	httpBindInterface: "127.0.0.1"

	stationLabelingService{
		instanceServerId: "labeling"
		provisionalInfoInstanceServerId: "stationentry",
		icosMetaInstanceServerId: ${cpmeta.instanceServers.icosMetaInstanceServerId},
		ontoId: "stationentry"
		tcUserIds: {
			"http://meta.icos-cp.eu/ontologies/stationentry/AS": []
			"http://meta.icos-cp.eu/ontologies/stationentry/ES": []
			"http://meta.icos-cp.eu/ontologies/stationentry/OS": []
		}
		dgUserId = "dummy@dummy.org"
		riComEmail = "dummy@dummy.org"
		calLabEmails = []
		mailing: {
			mailSendingActive: true
			smtpServer: "smtps.lu.se"
			username: "smtps_lunarc-fsicos"
			fromAddress: "fsicos@lunarc.lu.se"
			logBccAddress: "carbon.mail@nateko.lu.se"
		}
	}

	dataUploadService{
		metaServers: {
			ICOS: "icos"
			SITES: "sitesmeta"
		}
		collectionServers: {
			ICOS: "icoscolls"
			SITES: "sitescolls"
		}
		documentServers: {
			ICOS: "icosdocs"
			SITES: "sitesdocs"
		}
		handle {
			prefix: {
				ICOS: "11676"
				SITES: "11676.1"
			}
			baseUrl: "https://epic.pdc.kth.se:8000/"
			serverCertPemFilePath: "ssl/kth_pdc_server_cert.pem" //is optional if the server has proper cert
			clientCertPemFilePath: "ssl/handleClientCert.pem"
			clientPrivKeyPKCS8FilePath: "ssl/handleClientPrivKey.der"
			dryRun: false
		}
		etc {
			eddyCovarObjSpecId = "etcEddyFluxRawSeries"
			storageObjSpecId = "etcStorageFluxRawSeries"
			bioMeteoObjSpecId = "etcBioMeteoRawSeries"
			saheatObjSpecId = "etcSaheatFlagFile"
			phenocamObjSpecId = "etcPhenocamDaily"
			metaService = "http://gaia.agraria.unitus.it:14048/cpmeta"
			ingestFileMetaAtStart = true
		}
	}

	instanceServers {
		specific: {
			instanceschema: {
				writeContexts: ["http://meta.icos-cp.eu/ontologies/cpmeta/"]
				ingestion {
					ingesterId: "cpMetaOnto"
					ingestAtStartup: true
				}
			}
			stationsschema: {
				writeContexts: ["http://meta.icos-cp.eu/ontologies/stationentry/"]
				ingestion {
					ingesterId: "stationEntryOnto"
					ingestAtStartup: true
				}
			}
			instances: {
				logName: "instances"
				readContexts: [
					"http://meta.icos-cp.eu/resources/cpmeta/",
					"http://meta.icos-cp.eu/ontologies/cpmeta/",
					"http://meta.icos-cp.eu/documents/"
				]
				writeContexts: ["http://meta.icos-cp.eu/resources/cpmeta/"]
				ingestion{
					ingesterId: "extraPeopleAndOrgs"
					ingestAtStartup: false
				}
			}
			otcschema: {
				writeContexts: ["http://meta.icos-cp.eu/ontologies/otcmeta/"]
				ingestion {
					ingesterId: "otcMetaOnto"
					ingestAtStartup: true
				}
			}
			otcentry: {
				logName: "otcentry"
				readContexts: ["http://meta.icos-cp.eu/resources/otcmeta/", "http://meta.icos-cp.eu/ontologies/otcmeta/"]
				writeContexts: ["http://meta.icos-cp.eu/resources/otcmeta/"]
				ingestion {
					ingesterId: "otcMetaEntry"
					ingestAtStartup: false
				}
			}
			icos: {
				logName: "icos"
				readContexts: [
					"http://meta.icos-cp.eu/ontologies/cpmeta/",
					"http://meta.icos-cp.eu/resources/icos/",
					"http://meta.icos-cp.eu/resources/cpmeta/",
					"http://meta.icos-cp.eu/resources/extrastations/",
					"http://meta.icos-cp.eu/documents/"
				]
				writeContexts: ["http://meta.icos-cp.eu/resources/icos/"]
			}
			icoscolls:{
				logName: "icoscolls"
				readContexts: ["http://meta.icos-cp.eu/collections/", "http://meta.icos-cp.eu/resources/cpmeta/", "http://meta.icos-cp.eu/ontologies/cpmeta/"]
				writeContexts: ["http://meta.icos-cp.eu/collections/"]
			}
			sitescolls:{
				logName: "sitescolls"
				readContexts: ["https://meta.fieldsites.se/collections/", "https://meta.fieldsites.se/resources/sites/"]
				writeContexts: ["https://meta.fieldsites.se/collections/"]
			}
			icosdocs: {
				logName: "icosdocs"
				readContexts: ["http://meta.icos-cp.eu/documents/", "http://meta.icos-cp.eu/resources/cpmeta/", "http://meta.icos-cp.eu/ontologies/cpmeta/", "http://meta.icos-cp.eu/resources/icos/"]
				writeContexts: ["http://meta.icos-cp.eu/documents/"]
			}
			sitesdocs: {
				logName: "sitesdocs"
				readContexts: ["https://meta.fieldsites.se/documents/", "https://meta.fieldsites.se/resources/sites/"]
				writeContexts: ["https://meta.fieldsites.se/documents/"]
			}
			stationentry: {
				logName: "stations"
				writeContexts: ["http://meta.icos-cp.eu/resources/stationentry/"]
			}
			labeling: {
				logName: "labeling"
				writeContexts: ["http://meta.icos-cp.eu/resources/stationlabeling/"]
			}
			labelingForAdmin: {
				logName: "labeling"
				skipLogIngestionAtStart = true
				readContexts: [
					"http://meta.icos-cp.eu/resources/stationlabeling/",
					"http://meta.icos-cp.eu/resources/stationentry/"
				]
				writeContexts: ["http://meta.icos-cp.eu/resources/stationlabeling/"]
			}
			extrastations: {
				writeContexts: ["http://meta.icos-cp.eu/resources/extrastations/"]
				ingestion {
					ingesterId: "extraStations"
					ingestAtStartup: true
				}
			}
			sitesmeta: {
				logName: "sitesmeta"
				readContexts: [
					"http://meta.icos-cp.eu/ontologies/cpmeta/",
					"https://meta.fieldsites.se/resources/sites/",
					"https://meta.fieldsites.se/documents/"
				]
				writeContexts: ["https://meta.fieldsites.se/resources/sites/"]
			}
			dcat {
				writeContexts: ["http://meta.icos-cp.eu/resources/dcat/"]
				ingestion {
					ingesterId: "dcatdemo"
					ingestAtStartup: true
				}
			}
		}
		forDataObjects: {
			ICOS: {
				commonReadContexts: [
					"http://meta.icos-cp.eu/resources/cpmeta/",
					"http://meta.icos-cp.eu/ontologies/cpmeta/",
					"http://meta.icos-cp.eu/resources/icos/",
					"http://meta.icos-cp.eu/resources/extrastations/"
				]
				uriPrefix: "http://meta.icos-cp.eu/resources/"
				definitions: [
					{ label: "wdcgg", format: "http://meta.icos-cp.eu/ontologies/cpmeta/asciiWdcggTimeSer"},
					{ label: "atmcsv", format: "http://meta.icos-cp.eu/ontologies/cpmeta/asciiAtcTimeSer"},
					{ label: "atmprodcsv", format: "http://meta.icos-cp.eu/ontologies/cpmeta/asciiAtcProductTimeSer"},
					{ label: "etcprodcsv", format: "http://meta.icos-cp.eu/ontologies/cpmeta/asciiEtcHalfHourlyProductTimeSer"},
					{ label: "otcprodcsv", format: "http://meta.icos-cp.eu/ontologies/cpmeta/asciiOtcProductCsv"},
					{ label: "otcraw", format: "http://meta.icos-cp.eu/ontologies/cpmeta/otcRawData"},
					{ label: "etcmulti", format: "http://meta.icos-cp.eu/ontologies/cpmeta/etcRawTimeSerMultiZip"},
					{ label: "imagezip", format: "http://meta.icos-cp.eu/ontologies/cpmeta/multiImageZip"},
					{ label: "etccsv", format: "http://meta.icos-cp.eu/ontologies/cpmeta/asciiEtcRawTimeSer"},
					{ label: "etcbin", format: "http://meta.icos-cp.eu/ontologies/cpmeta/binEtcRawTimeSer"},
					{ label: "ecocsv", format: "http://meta.icos-cp.eu/ontologies/cpmeta/asciiEtcTimeSer"},
					{ label: "tscsv", format: "http://meta.icos-cp.eu/ontologies/cpmeta/csvWithIso8601tsFirstCol"},
					{ label: "socat", format: "http://meta.icos-cp.eu/ontologies/cpmeta/asciiOtcSocatTimeSer"},
					{ label: "netcdf", format: "http://meta.icos-cp.eu/ontologies/cpmeta/netcdf"},
					{ label: "netcdftimeser", format: "http://meta.icos-cp.eu/ontologies/cpmeta/netcdfTimeSeries"},
					{ label: "ingosrar", format: "http://meta.icos-cp.eu/ontologies/cpmeta/ingosRar"},
					{ label: "excel", format: "http://meta.icos-cp.eu/ontologies/cpmeta/excel"},
					{ label: "image", format: "http://meta.icos-cp.eu/ontologies/cpmeta/image"},
					{ label: "ziparch", format: "http://meta.icos-cp.eu/ontologies/cpmeta/zipArchive"},
				]
			}
			SITES: {
				commonReadContexts: [
					"https://meta.fieldsites.se/resources/sites/",
					"http://meta.icos-cp.eu/ontologies/cpmeta/"
				]
				uriPrefix: "https://meta.fieldsites.se/resources/"
				definitions: [
					{ label: "sitesimage", format: "https://meta.fieldsites.se/ontologies/sites/image"},
					{ label: "siteszip", format: "http://meta.icos-cp.eu/ontologies/cpmeta/zipArchive"},
					{ label: "sitesdelimitedheadercsv", format: "https://meta.fieldsites.se/ontologies/sites/delimitedHeaderCsv"},
					{ label: "sitesaquanetpointmeasurementscsv", format: "https://meta.fieldsites.se/ontologies/sites/aquanetPointMeasurementsCsv"},
					{ label: "sitesspectralpointcloud", format: "https://meta.fieldsites.se/ontologies/sites/spectralPointCloud"},
				]
			}
		}
		cpMetaInstanceServerId = "instances"
		icosMetaInstanceServerId = "icos"
		otcMetaInstanceServerId = "otcentry"
	}

	rdfLog {
		server{
			host: "localhost"
			port: 5432
		}
		credentials {
			db: "postgres"
			user: "postgres"
		}
	}

	fileStoragePath: "./fileStorage"
	rdfStorage: {
		path: "./rdfStorage"
		recreateAtStartup: false
		indices: "spoc,posc,ospc,cspo,cpos,cosp"
		disableCpIndex: false,
		recreateCpIndexAtStartup: false
	}

	onto {
		ontologies: [{
			owlResource: "/owl/uiannotations.owl"
		},{
			owlResource: "/owl/cpmeta.owl"
		},{
			owlResource: "/owl/stationEntry.owl"
		},{
			ontoId: "cpmeta"
			owlResource: "/owl/cpmetaui.owl"
		},{
			ontoId: "stationentry"
			owlResource: "/owl/stationEntryUi.owl"
		},{
			ontoId: "labeling"
			owlResource: "/owl/labelingUi.owl"
		},{
			ontoId: "sitesmeta"
			owlResource: "/owl/sitesmetaui.owl"
		},{
			owlResource: "/owl/otcmeta.owl"
		},{
			ontoId: "otcmeta"
			owlResource: "/owl/otcmetaui.owl"
		},{
			ontoId: "icosmeta"
			owlResource: "/owl/icosmetaui.owl"
		}]

		instOntoServers {
			cpmeta {
				serviceTitle: "Carbon Portal metadata instances"
				authorizedUserIds: []
				ontoId: "cpmeta"
				instanceServerId: "instances"
			}
			icosmeta {
				serviceTitle: "ICOS metadata instances (automatically filled in)"
				authorizedUserIds: []
				ontoId: "icosmeta"
				instanceServerId: "icos"
			}
			stationentry {
				serviceTitle: "Provisional ICOS stations metadata"
				authorizedUserIds: []
				ontoId: "stationentry"
				instanceServerId: "stationentry"
			}
			otcentry {
				serviceTitle: "ICOS OTC metadata entry"
				authorizedUserIds: []
				ontoId: "otcmeta"
				instanceServerId: "otcentry"
			}
			labeling {
				serviceTitle: "Administrative access to ICOS labeling metadata"
				authorizedUserIds: []
				ontoId: "labeling"
				instanceServerId: "labelingForAdmin"
			}
			sitesmeta {
				serviceTitle: "SITES metadata editor"
				authorizedUserIds: []
				ontoId: "sitesmeta"
				instanceServerId: "sitesmeta"
			}
		}
	}

	auth {
		ICOS: ${cpauthAuthPub} //substituted from cpauth core config
		SITES: ${fieldsitesAuthPub} //substituted from cpauth core config
	}
	core = ${metacore} //substituted from meta-core reference config

	sparql{
		maxQueryRuntimeSec = 10
		quotaPerMinute = 20
		quotaPerHour = 300
		maxParallelQueries = 5
		maxQueryQueue = 100
		banLength = 10,
		maxCacheableQuerySize = 8388608,
		adminUsers = [] //add actual admin users in production!
	}

	citations{
		style = "elsevier-harvard"
		eagerWarmUp = true
		timeoutSec = 3
		doi {
			restEndpoint: "https://api.datacite.org/"
			envries {
				ICOS {
					symbol: "SND.ICOS"
					doiPrefix: "10.18160"
				}
				SITES {
					symbol: "SND.SITES"
					doiPrefix: "10.23700"
				}
			}
		}
	}

	statsClient{
		downloadsUri = "http://127.0.0.1:9011/stats/api/downloadCount"

		previews{
			baseUri = "http://127.0.0.1:8088"
			dbNames {
				ICOS: "db"
				SITES: "sitesdb"
			}
		}

	}

}
