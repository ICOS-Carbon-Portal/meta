
akka {
	loggers = ["akka.event.slf4j.Slf4jLogger"]
	logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
	log-dead-letters = 0
	akka.log-dead-letters-during-shutdown = 0

	http.server.parsing {
		max-uri-length = 4k
		max-content-length = 50m
	}
}

cpmeta{
	port: 9094

	stationLabelingService{
		instanceServerId: "labeling"
		provisionalInfoInstanceServerId: "stationentry"
		ontoId: "stationentry"
		tcUserIds: {
			"http://meta.icos-cp.eu/ontologies/stationentry/AS": []
			"http://meta.icos-cp.eu/ontologies/stationentry/ES": []
			"http://meta.icos-cp.eu/ontologies/stationentry/OS": []
		}
		dgUserId = "dummy@dummy.org"
		riComEmail = "dummy@dummy.org"
		calLabEmails = []
		mailing: {
			mailSendingActive: true
			smtpServer: "smtps.lu.se"
			username: "smtps_lunarc-fsicos"
			password: "dummy (replace in secret config)"
			fromAddress: "fsicos@lunarc.lu.se"
			logBccAddress: "carbon.mail@nateko.lu.se"
		}
	}

	dataUploadService{
		icosMetaServerId: "instances"
		submitters: {
			CP: {
				authorizedUserIds: ["test@upload"]
				submittingOrganization: "http://meta.icos-cp.eu/resources/organizations/CP"
			}
			ATC: {
				authorizedUserIds: ["test@upload"]
				producingOrganizationClass: "http://meta.icos-cp.eu/ontologies/cpmeta/AS"
				submittingOrganization: "http://meta.icos-cp.eu/resources/organizations/ATC"
			}
		}
		epicPid: {
			url: "https://epic.pdc.kth.se/v2/handles/"
			prefix: "11676"
			password: "password",
			dryRun: false
		}
		etc {
			eddyCovarObjSpecId = "etcEddyFluxRawSeries"
			storageObjSpecId = "etcStorageFluxRawSeries"
			bioMeteoObjSpecId = "etcBioMeteoRawSeries"
		}
	}

	instanceServers {
		specific: {
			instanceschema: {
				writeContexts: ["http://meta.icos-cp.eu/ontologies/cpmeta/"]
				ingestion {
					ingesterId: "cpMetaOnto"
					ingestAtStartup: true
				}
			}
			stationsschema: {
				writeContexts: ["http://meta.icos-cp.eu/ontologies/stationentry/"]
				ingestion {
					ingesterId: "stationEntryOnto"
					ingestAtStartup: true
				}
			}
			instances: {
				//logName: "instances"
				readContexts: [
					"http://meta.icos-cp.eu/resources/cpmeta/",
					"http://meta.icos-cp.eu/ontologies/cpmeta/",
					"http://meta.icos-cp.eu/resources/stations/"
				]
				writeContexts: ["http://meta.icos-cp.eu/resources/cpmeta/"]
				ingestion{
					ingesterId: "extraPeopleAndOrgs"
					waitFor: ["stations"]
					ingestAtStartup: true
				}
			}
			stationentry: {
				logName: "stations"
				writeContexts: ["http://meta.icos-cp.eu/resources/stationentry/"]
			}
			labeling: {
				logName: "labeling"
				writeContexts: ["http://meta.icos-cp.eu/resources/stationlabeling/"]
			}
			labelingForAdmin: {
				logName: "labeling"
				skipLogIngestionAtStart = true
				readContexts: [
					"http://meta.icos-cp.eu/resources/stationlabeling/",
					"http://meta.icos-cp.eu/resources/stationentry/"
				]
				writeContexts: ["http://meta.icos-cp.eu/resources/stationlabeling/"]
			}
			stations: {
				writeContexts: ["http://meta.icos-cp.eu/resources/stations/"]
				ingestion {
					ingesterId: "pisAndStations"
					waitFor: ["stationentry", "labeling"]
					ingestAtStartup: true
				}
			}
			badmschema: {
				writeContexts: ["http://meta.icos-cp.eu/ontologies/badm/"]
				ingestion {
					ingesterId: "badmSchema"
					ingestAtStartup: true
				}
			}
			badm: {
				writeContexts: ["http://meta.icos-cp.eu/resources/badm/"]
				ingestion {
					ingesterId: "badm"
					ingestAtStartup: true
				}
			}
		}
		forDataObjects: {
			commonReadContexts: [
				"http://meta.icos-cp.eu/resources/cpmeta/",
				"http://meta.icos-cp.eu/ontologies/cpmeta/",
				"http://meta.icos-cp.eu/resources/stations/"
			]
			uriPrefix: "http://meta.icos-cp.eu/resources/"
			definitions: [
				{ label: "wdcgg", format: "http://meta.icos-cp.eu/ontologies/cpmeta/asciiWdcggTimeSer"},
				{ label: "atmcsv", format: "http://meta.icos-cp.eu/ontologies/cpmeta/asciiAtcTimeSer"},
				{ label: "atcmulti", format: "http://meta.icos-cp.eu/ontologies/cpmeta/atcZipMulti"},
				{ label: "etccsv", format: "http://meta.icos-cp.eu/ontologies/cpmeta/asciiEtcRawTimeSer"},
				{ label: "etcbin", format: "http://meta.icos-cp.eu/ontologies/cpmeta/binEtcRawTimeSer"},
				{ label: "ecocsv", format: "http://meta.icos-cp.eu/ontologies/cpmeta/asciiEtcTimeSer"},
				{ label: "socat", format: "http://meta.icos-cp.eu/ontologies/cpmeta/asciiOtcSocatTimeSer"},
				{ label: "netcdf", format: "http://meta.icos-cp.eu/ontologies/cpmeta/netcdf"},
				{ label: "ingosrar", format: "http://meta.icos-cp.eu/ontologies/cpmeta/ingosRar"}
				{ label: "excel", format: "http://meta.icos-cp.eu/ontologies/cpmeta/excel"}
			]
		}
	}

	rdfLog {
		server{
			host: "localhost"
			port: 5432
		}
		credentials {
			db: "postgres"
			user: "postgres"
			password: "password"
		}
	}

	fileStoragePath: "./fileStorage"

	onto {
		ontologies: [{
			owlResource: "/owl/uiannotations.owl"
		},{
			owlResource: "/owl/cpmeta.owl"
		},{
			owlResource: "/owl/stationEntry.owl"
		},{
			ontoId: "cpmeta"
			owlResource: "/owl/cpmetaui.owl"
		},{
			ontoId: "stationentry"
			owlResource: "/owl/stationEntryUi.owl"
		},{
			ontoId: "labeling"
			owlResource: "/owl/labelingUi.owl"
		}]

		instOntoServers {
			cpmeta {
				serviceTitle: "Carbon Portal metadata instances"
				authorizedUserIds: []
				ontoId: "cpmeta"
				instanceServerId: "instances"
			}
			stationentry {
				serviceTitle: "Provisional ICOS stations metadata"
				authorizedUserIds: []
				ontoId: "stationentry"
				instanceServerId: "stationentry"
			}
			labeling {
				serviceTitle: "Administrative access to ICOS labeling metadata"
				authorizedUserIds: []
				ontoId: "labeling"
				instanceServerId: "labelingForAdmin"
			}
		}
	}

	auth = ${cpauth.auth.pub} //substituted from cpauth core config

	sparql{
		maxQueryRuntimeSec = 10
		quotaPerMinute = 20
		quotaPerHour = 120
		maxParallelQueries = 5
	}
}
