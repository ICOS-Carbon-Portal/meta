
akka {
	log-dead-letters = 0
	akka.log-dead-letters-during-shutdown = 0

	http.server.parsing {
		max-uri-length = 4k
		max-content-length = 30m
	}
}

cpmeta{
	port: 9094

	stationLabelingService{
		instanceServerId: "labeling"
		provisionalInfoInstanceServerId: "stations"
		tcUserIds: {
			"http://meta.icos-cp.eu/ontologies/stationentry/AS": []
			"http://meta.icos-cp.eu/ontologies/stationentry/ES": []
			"http://meta.icos-cp.eu/ontologies/stationentry/OS": []
		}
		mailing: {
			mailSendingActive: true
			smtpServer: "mail.lu.se"
			fromAddress: "labeling@icos-cp.eu"
			templatePaths: {
				submitted: "/mailtemplates/labeling_submited.html"
			}
			logBccAddress: "carbon.mail@nateko.lu.se"
		}
		ontoId: "stationentry"
	}

	dataUploadService{
		instanceServerId: "uploads"
		submitters: {
			ATC: {
				authorizedUserIds: ["test@upload"]
				producingOrganizationClass: "http://meta.icos-cp.eu/ontologies/cpmeta/AS"
				submittingOrganization: "http://meta.icos-cp.eu/ontologies/cpmeta/instances/ATC"
			}
		}
		epicPid: {
			url: "https://epic.pdc.kth.se/v2/handles/"
			prefix: "11676"
			password: "password"
		}
    landingPage: {
      templatePath: "/htmltemplates/landing_page.html"
    }
	}

	instanceServers {
		instanceschema: {
			writeContexts: ["http://meta.icos-cp.eu/ontologies/cpmeta/"]
			ingestion {
				ingesterId: "cpMetaOnto"
				ingestAtStartup: true
			}
		}
		stationsschema: {
			writeContexts: ["http://meta.icos-cp.eu/ontologies/stationsschema/"]
			ingestion {
				ingesterId: "stationEntryOnto"
				ingestAtStartup: true
			}
		}
		instances: {
			readContexts: ["http://meta.icos-cp.eu/ontologies/cpmeta/instances/", "http://meta.icos-cp.eu/ontologies/cpmeta/"]
			writeContexts: ["http://meta.icos-cp.eu/ontologies/cpmeta/instances/"]
			ingestion {
				ingesterId: "manualContent"
				ingestAtStartup: true
			}
		}
		stations: {
			//logName: "stations"
			writeContexts: ["http://meta.icos-cp.eu/ontologies/stationentry/"]
		}
		labeling: {
			//logName: "labeling"
			writeContexts: ["http://meta.icos-cp.eu/ontologies/stationlabeling/"]
		}
		uploads: {
			//logName: "uploads"
			readContexts: [
				"http://meta.icos-cp.eu/ontologies/cpmeta/uploads/",
				"http://meta.icos-cp.eu/ontologies/cpmeta/instances/",
				"http://meta.icos-cp.eu/ontologies/cpmeta/"
			],
			writeContexts: ["http://meta.icos-cp.eu/ontologies/cpmeta/uploads/"]
		}
	}

	rdfLog {
		server{
			host: "localhost"
			port: 5432
		}
		credentials {
			db: "postgres"
			user: "postgres"
			password: "password"
		}
	}

	fileStoragePath: "./fileStorage"

	onto {
		ontologies: [{
			owlResource: "/owl/uiannotations.owl"
		},{
			owlResource: "/owl/cpmeta.owl"
		},{
			owlResource: "/owl/stationEntry.owl"
		},{
			ontoId: "cpmeta"
			owlResource: "/owl/cpmetaui.owl"
		},{
			ontoId: "stationentry"
			owlResource: "/owl/stationEntryUi.owl"
		}]

		instOntoServers {
			cpmeta {
				authorizedUserIds: []
				ontoId: "cpmeta"
				instanceServerId: "instances"
			}
			stationentry {
				authorizedUserIds: []
				ontoId: "stationentry"
				instanceServerId: "stations"
			}
		}
	}

	auth = ${cpauth.auth.pub} //substituted from cpauth core config

}
